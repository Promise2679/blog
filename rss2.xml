<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xenlyra的小站</title>
    <link>https://blog.xenlyra.cc/</link>
    
    <image>
      <url>https://blog.xenlyra.cc/icon.png</url>
      <title>Xenlyra的小站</title>
      <link>https://blog.xenlyra.cc/</link>
    </image>
    
    <atom:link href="https://blog.xenlyra.cc/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 11 Oct 2025 06:58:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>test</title>
      <link>https://blog.xenlyra.cc/test/</link>
      <guid>https://blog.xenlyra.cc/test/</guid>
      <pubDate>Sat, 11 Oct 2025 06:40:31 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;rss 是一个基于 xml 的格式规范他可以将来自各平太的信息用统一的格是，一行字数达到 32 左右时出现顶格&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>rss 是一个基于 xml 的格式规范他可以将来自各平太的信息用统一的格是，一行字数达到 32 左右时出现顶格</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.xenlyra.cc/test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>个人的 RSS 折腾记录</title>
      <link>https://blog.xenlyra.cc/rss/</link>
      <guid>https://blog.xenlyra.cc/rss/</guid>
      <pubDate>Fri, 03 Oct 2025 14:52:18 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这几天配置 RSS 花了我很多的精力，大作业都没心思做了，感觉可以说的地方还蛮多的，这么好的机会，还不拿来水一篇？&lt;/p&gt;
&lt;p&gt;先直接看下最终的成果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.xenlyra.cc/3f2e065b8b3fc7db3</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这几天配置 RSS 花了我很多的精力，大作业都没心思做了，感觉可以说的地方还蛮多的，这么好的机会，还不拿来水一篇？</p><p>先直接看下最终的成果图：</p><p><img src="https://img.xenlyra.cc/3f2e065b8b3fc7db34719181cec012a0.webp" title="怎么全是音游啊？唉，音批" /></p><p>还是很爽的</p><h1 id="什么是-rss">什么是 RSS</h1><p>RSS 是一个基于 XML 的格式规范，它可以将来自各平台的信息用统一的格式表示，借助专用阅读器就可以达到一站式获取信息的效果</p><h1 id="为什么要使用-rss">为什么要使用 RSS</h1><p>不知道大家有没有过这样的经历：虽然关注了一些博主，但是动态中不会显示他们的消息，让你一度以为他似了，直到有一天点进他的主页，才发现他一直在活跃。现在我们可以直接通过 RSS 订阅这个博主的动态，这样就不会被平台的逆天机制恶心到了</p><p>除此之外，以往获取信息需要前往不同的平台，跳转到各种页面，这本身就是一个很繁琐的流程，而且很容易出现遗漏。RSS 通过将信息聚合起来，可以优雅地解决这个问题</p><h1 id="那还说啥了开搞">那还说啥了，开搞！</h1><h2 id="选一款-rss-阅读器">选一款 RSS 阅读器</h2><p>经过一番了解，我得知阅读器大体包括本地阅读器和在线阅读器。在线阅读器的优势在于可以实时更新，如果订阅源更新内容比较多，本地阅读器可能会出现遗漏信息的情况，不过基本上只要每天都上线刷新一下也没什么大问题</p><p>网上能找到的在线阅读器基本上都需要付费才能享受全部功能，我最终选择的是本地阅读器，所以不会过多介绍。除此之外还有自己部署阅读器的做法，不过花钱用 VPS 部署一个阅读器感觉多少有些没必要，如果只是本地部署的话，那就跟本地阅读器没什么区别了，所以把他排除掉了，<del>如果是富哥当我没说</del></p><h3 id="feedly"><a href="https://feedly.com/">Feedly</a></h3><p>推荐的唯一一个在线阅读器，界面非常的美观，是我阅读器里面用下来体验最舒适的一个。它还支持自动生成 RSS，如果一些网站没有提供 RSS 订阅，这个功能可以帮你爬取并处理信息，还提供了一个可视化的界面让你手动调整，十分高效，当然这个功能是付费计划专属的。缺点就是免费计划功能阉割，且只支持 100 个订阅源和 3 个文件夹，要想用的舒服还是得付费，如果你可以承受一个月 50 上下的花销，可以选择这一个阅读器</p><p><img src="https://img.xenlyra.cc/9fa2ed029a2574ff4747bf98fb02045b.webp" title="美观的页面" /></p><h3 id="irreader"><a href="https://irreader.fatecore.com/">Irreader</a></h3><p>本地阅读器，功能齐全，同样支持自动生成 RSS，最大亮点就是配备了十分完善的推送系统。可以选择弹窗提醒，也支持通过邮件、钉钉、微信、Telegram 等方式推送，不过除了弹窗以外的几乎所有功能都需要 VIP，价格不低，免费用户只能订阅 10 个 RSS，加上这款软件的颜值实在不能说好看，最后也是果断放弃了</p><h3 id="folo"><a href="https://folo.is/">Folo</a></h3><p>与 RSSHub（开源的 RSS 源生成和分享平台，后面会讲）出自同一制作组，虽然没有 Irreader 那样强大的推送服务，但是他拥有用户间互相分享的数量庞大的 RSS 源，界面也比较漂亮，通过分享自己的 RSS 源还有机会拿到赏金，属于是非常全面的一款产品</p><p>至于为什么没有选择它，主要是因为它太占内存了，一开始安装好大概有 700MB，用了没一会就接近一个 G 了，虽然它提供了很多的功能，但是跟阅读体验没有太大关系，于是我也忍痛把它卸载，选择了接下来这款更加轻量化的阅读器</p><h3 id="fluent-reader"><a href="https://github.com/yang991178/fluent-reader">Fluent Reader</a></h3><p>我现在正在用的一款，也是在文章开始展示的阅读器，个人认为是本地阅读器 UI 巅峰，阅读体验没的说。然而缺点也比较突出，就是功能比较简陋。上面提到的消息推送、分享订阅源、自动生成 RSS 一概没有，甚至没有最小化托盘和开机自启。属于是阅读器丁真，除了颜值啥也没有。好在从爬取订阅源到阅读的这一整套流程做的还是很完善的，一句话来说就是，够用！</p><p>正如前文所言，它占用内存相对较小，大概 200MB 多一点，比其他阅读器小很多，也是我选择这款阅读器的重要原因</p><p><del>说起来这些阅读器怎么都是 F 字辈的</del></p><h2 id="订阅-rss-源">订阅 RSS 源</h2><h3 id="部署-rsshub">部署 RSSHub</h3><p>选好心仪的阅读器后，接下来就要去寻找 RSS 源了。一般来讲博客站点都会提供 RSS 订阅的服务，但是 b 站，油管这样的平台并不会直接提供，需要自己制作 RSS。这时就要用到上文提到的 <a href="https://docs.rsshub.app/zh/">RSSHub</a> 了，开发者会将制作好的 RSS 生成代码放在这里，借助服务器路由就能够订阅各大平台的 RSS。如果没有找到想订阅的网站，也可以通过封装好的函数自己制作</p><p>官方提供了一个实例供我们使用，我们可以直接用它来订阅 RSS，然而它并不能完全满足我们的要求。因为官方的服务器位于美国，加上访问人数多，速度会很慢，有时甚至不响应。还有就是无法自主配置环境变量，有些需要 token 的路由无法使用。为了更好的满足自己的需求，我决定自己部署一个 RSSHub</p><p>官方文档中给了很多平台的部署方法，我最后选择了 Zeabur，原因说来也简单，它每个月会给五美元的免费额度，是除 Vercel 外给的最多的。文档作者也很贴心，提供了一键部署的按钮，我只需要配置一下域名就好了，整个过程十分愉快</p><p>经过测试，如果正常使用的话，每天的费用会在 0.1 美元左右浮动，足够挺过一个月了</p><p>部署过程中也是遇到了很多或大或小的问题，都拿来说一下</p><h3 id="油管推送内容重复">油管推送内容重复</h3><p>我在用 RSSHub 订阅油管频道的时候，发现相同的内容，每次刷新后返回的 RSS 发布时间不一样，导致一个信息会在阅读器中多次出现。我百思不得其解，于是去 Github 上提了 issue，也是我的 first issue。没一会就收到了回复，原来是人工智能 Dosu 回答了我的问题。它说我没在环境变量中配置 token，而第三方的爬取工具只能返回“xxx 小时前”格式的内容，就会出现我这样的情况</p><p>我一听感觉很有道理，按照它说的配置，果然不重复了，然后 close 了这个 issue。虽然我在文档中看到了这个配置项，但因为标的是 optional，想着多一事不如少一事就没有搞。果然以后还是不能偷懒啊</p><p>悲催的是我在接下来又提了一个 issue，然后贡献了自己的第一个 pr，感慨万千，如果这俩顺序反过来该多好</p><h3 id="taptap-部分游戏订阅失败">Taptap 部分游戏订阅失败</h3><p>既然要整理信息，那肯定少不了游戏资讯，有的 b 站官号动态除了更新情报外可能还会推送其他内容，不是我想看的东西，我还需要一个更加干净纯粹的情报站。很快我就把眼光放在了 Taptap 上面，如果有官方入驻的话，这里的信息还是比较及时的</p><p>然而我在订阅 Phigros 的官方动态时，发生了这样的报错（找不到图了先将就一下吧）：</p><p><code>TypeError: Cannot read properties of undefined (reading 'id_str')</code></p><p>通过格式来看，这个报错很明显是 JS 返回的。也就是说，是代码发生了问题。我们先来看看这部分处理函数的源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lang = ctx.<span class="property">req</span>.<span class="title function_">param</span>(<span class="string">&#x27;lang&#x27;</span>) ?? <span class="string">&#x27;zh_CN&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> appId = ctx.<span class="property">req</span>.<span class="title function_">param</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> appData = <span class="keyword">await</span> <span class="title function_">appDetail</span>(appId, lang);</span><br><span class="line">    <span class="keyword">const</span> type = ctx.<span class="property">req</span>.<span class="title function_">param</span>(<span class="string">&#x27;type&#x27;</span>) ?? <span class="string">&#x27;feed&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> sort = ctx.<span class="property">req</span>.<span class="title function_">param</span>(<span class="string">&#x27;sort&#x27;</span>) ?? <span class="string">&#x27;created&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> groupId = appData.<span class="property">group</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">const</span> appImg = appData.<span class="property">app</span>.<span class="property">icon</span>.<span class="property">original_url</span> || appData.<span class="property">app</span>.<span class="property">icon</span>.<span class="property">url</span>;</span><br><span class="line">    <span class="keyword">const</span> appName = appData.<span class="property">app</span>.<span class="property">title</span>;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;getRootUrl(<span class="literal">false</span>)&#125;</span>/webapiv2/feed/v7/by-group?group_id=<span class="subst">$&#123;groupId&#125;</span>&amp;type=<span class="subst">$&#123;type&#125;</span>&amp;sort=<span class="subst">$&#123;sort&#125;</span>&amp;<span class="subst">$&#123;X_UA(lang)&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> topicsList = <span class="keyword">await</span> <span class="title function_">ofetch</span>(url);</span><br><span class="line">    <span class="keyword">const</span> list = topicsList.<span class="property">data</span>.<span class="property">list</span>;</span><br><span class="line">    <span class="keyword">const</span> out = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">        list.<span class="title function_">map</span>(<span class="function">(<span class="params">&#123; moment &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> link = moment.<span class="property">sharing</span>.<span class="property">url</span>;</span><br><span class="line">            <span class="keyword">return</span> cache.<span class="title function_">tryGet</span>(link, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> author = moment.<span class="property">author</span>.<span class="property">user</span>.<span class="property">name</span>;</span><br><span class="line">                <span class="keyword">const</span> topicId = moment.<span class="property">topic</span>.<span class="property">id_str</span>;</span><br><span class="line">                <span class="comment">// raw_text sometimes is &quot;&quot; so || is better than ??</span></span><br><span class="line">                <span class="keyword">const</span> title = moment.<span class="property">topic</span>.<span class="property">title</span> || moment.<span class="property">topic</span>.<span class="property">summary</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">let</span> description = moment.<span class="property">topic</span>.<span class="property">summary</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (moment.<span class="property">topic</span>.<span class="property">pin_video</span>) &#123;</span><br><span class="line">                    description += <span class="title function_">videoPost</span>(moment.<span class="property">topic</span>.<span class="property">pin_video</span>);</span><br><span class="line">                    <span class="keyword">if</span> (moment.<span class="property">topic</span>.<span class="property">footer_images</span>?.<span class="property">images</span>) &#123;</span><br><span class="line">                        description += <span class="title function_">imagePost</span>(moment.<span class="property">topic</span>.<span class="property">footer_images</span>.<span class="property">images</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    description = <span class="keyword">await</span> <span class="title function_">topicPost</span>(appId, topicId, lang);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    title,</span><br><span class="line">                    description,</span><br><span class="line">                    author,</span><br><span class="line">                    link,</span><br><span class="line">                    <span class="attr">pubDate</span>: <span class="title function_">parseDate</span>(moment.<span class="property">created_time</span>, <span class="string">&#x27;X&#x27;</span>),</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ret = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">`<span class="subst">$&#123;appName&#125;</span> - <span class="subst">$&#123;typeMap[type][lang]&#125;</span> - TapTap 论坛`</span>,</span><br><span class="line">        <span class="attr">link</span>: <span class="string">`<span class="subst">$&#123;getRootUrl(<span class="literal">false</span>)&#125;</span>/app/<span class="subst">$&#123;appId&#125;</span>/topic?type=<span class="subst">$&#123;type&#125;</span>&amp;sort=<span class="subst">$&#123;sort&#125;</span>`</span>,</span><br><span class="line">        <span class="attr">image</span>: appImg,</span><br><span class="line">        <span class="attr">item</span>: out.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&#x27;json&#x27;</span>, &#123;</span><br><span class="line">        ...ret,</span><br><span class="line">        appId,</span><br><span class="line">        groupId,</span><br><span class="line">        topicsList,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体的逻辑是，获取路由中传入的参数，然后发往 Taptap 的 API 接口，获取到帖子列表后，对帖子进行逐个处理，最终返回 RSS。访问 id_str 的地方只有一处，就是 topicId 的声明部分，它的作用是通过请求这个 id 进一步获取帖子的具体内容，包括贴文和图片</p><p>因为我的 Milthm 订阅也是用的这个路由，没有任何问题，所以我推断可能发生了某个特殊情况，导致 json 结构不一致，引发了报错。为此我手搓 url 拿到了响应信息，然后<del>拿显微镜一行一行观察</del>发现果然有一个帖子不符合规范。这个帖子因为转发了其他的帖子，id_str 用的是被转发帖子的，而且被转移到了其他的地方</p><p>既然发现了问题，改起来就容易了。我先是去提了一个 issue，探讨接下来的解决方案，得到的答复是将正文和被转发文章的内容全部展示出来。然后我从凌晨一点开始写代码，到了四点完成编写并通过测试，提交 <a href="https://github.com/DIYgod/RSSHub/pull/20220">PR</a>，很快啊就被合并了，不亏是歪果仁大半夜的回复效率就是高。通过的一瞬间倦意一扫而空，躺在床上兴奋的睡不着，参与开源的乐趣大概就在于此吧</p><p>关于 json 具体结构以及修改后的代码，感兴趣的自己去看吧，篇幅原因不展示了</p><p>修改后的代码其实还是有缺陷的。因为缺乏实例，没有涵盖到转发视频的情况，届时可能不会显示视频，甚至还是会报错，那时就需要进一步修改了</p><h3 id="b-站订阅视频的风控问题">b 站订阅视频的风控问题</h3><p>其实订阅 b 站视频的步骤非常简单，只要在环境变量中添加 token，然后在阅读器中订阅相应的路由就可以了。然而问题就出在更新 token 这个步骤上，b 站的 token 更新频率很频繁，更新之后原来的 token 就失效了，无法用来获取信息，如果一两天手动更换一次 token 的话会很麻烦。于是我在网上找到了这个 <a href="https://github.com/DIYgod/RSSHub/issues/18019">issue</a>，有人提到用无痕模式拿到 token 之后能保持较长时间的有效期，我在别的地方还看到借助 CookieCloud 编写脚本实时更新的，但是嘛...哎呀太麻烦懒得搞了，就订阅了一个视频源不想大动干戈，所以最后还是选择手动更新</p><p>虽然有一点小小的缺憾，综合来看使用体验已经非常令我满意了</p><h1 id="尾声">尾声</h1><p>把这些能想到的东西都安顿好后，我也算是从火星搬回地球了，终于不会再错过游戏更新的信息。找资料的过程也额外发现了不少优质的博客，顺手都添加了订阅。不得不感慨这些技术真的大大方便了人们的生活，希望以后能多多学习吧</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.xenlyra.cc/rss/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>伪随机数预测模块 Randcrack 的使用</title>
      <link>https://blog.xenlyra.cc/randcrack/</link>
      <guid>https://blog.xenlyra.cc/randcrack/</guid>
      <pubDate>Sun, 30 Mar 2025 11:37:30 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;刷题时碰到了一个预测随机数的题目，于是就了解到了 Randcrack，拿来分享一下。&lt;/p&gt;
&lt;p&gt;Randcrack 是 Python 的一个伪随机数预测模块，他可以通过分析由 MT19973 算法生成的随机数，来预测之后产生的随机数。&lt;/p&gt;
&lt;h1 id=&quot;基本使</description>
        
      
      
      
      <content:encoded><![CDATA[<p>刷题时碰到了一个预测随机数的题目，于是就了解到了 Randcrack，拿来分享一下。</p><p>Randcrack 是 Python 的一个伪随机数预测模块，他可以通过分析由 MT19973 算法生成的随机数，来预测之后产生的随机数。</p><h1 id="基本使用">基本使用</h1><p><code>rc = RandCrack()</code></p><p>创建一个 RandCrack 对象</p><p><code>rc.submit(num)</code></p><p>传一个 32 位整数，上传 624 个以上就可以预测了</p><p><code>rc.predict_你想预测的函数(函数的参数)</code></p><p>如 rc.predict_getrandbits(32)</p><h1 id="一道例题">一道例题</h1><p>我们通过一道题目来进一步掌握他的使用方式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>:</span><br><span class="line">        add = <span class="number">16</span> - (<span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>)) % <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = <span class="number">0</span></span><br><span class="line">    text = text + (<span class="string">&#x27;\0&#x27;</span> * add)</span><br><span class="line">    <span class="keyword">return</span> text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    r1 = getrandbits(<span class="number">64</span>)</span><br><span class="line">    r2 = getrandbits(<span class="number">32</span>)</span><br><span class="line">    m = <span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(r1).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    salt = <span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(r2).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    m += salt</span><br><span class="line">    <span class="keyword">return</span> add_to_16(m.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, key, iv</span>):</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    cipher_text = cryptos.encrypt(m)</span><br><span class="line">    <span class="keyword">return</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params">key, iv</span>):</span><br><span class="line">    old_m = init()</span><br><span class="line">    c = encrypt(old_m, key, iv)</span><br><span class="line">    <span class="keyword">return</span> b2a_hex(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flag=<span class="string">&#x27;Stinger&#123;***************************************&#125;&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;msg.txt&quot;</span>, <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">    old_key = <span class="string">b&#x27;73E5602B54FE63A5&#x27;</span></span><br><span class="line">    old_iv = <span class="string">b&#x27;B435AE462FBAA662&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        old_c = chall(old_key, old_iv)</span><br><span class="line">        f.write(<span class="string">&quot;&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(old_c.decode()))</span><br><span class="line">    salt = <span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(getrandbits(<span class="number">32</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    m = flag.encode() + salt</span><br><span class="line">    key = <span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(getrandbits(<span class="number">64</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    iv = <span class="string">&quot;&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(getrandbits(<span class="number">64</span>)).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    c = encrypt(add_to_16(m.decode()), key, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c = %r&quot;</span>%(b2a_hex(c)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = b&#x27;9847f103ed4dce08c5ab8cb22288a477df4ae2a96bf10ccecc94ba799e4e072372c401aed54925e2eeff47fe5c56be2c&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="整体思路">整体思路</h2><p>看上去是道 AES 加密的题目，然而注意到它们都是由<code>getrandbits()</code>函数生成的，这是 random 库的一个随机数生成函数，使用的正是 MT19973 算法，所以只要我们预测出 iv、salt 和 key，这道题基本就做完了</p><p>阅读题目，msg.txt 中记录了 208 组 AES 密钥的数据，每组数据由一个 64 位数和一个 32 位数拼接而成，208*3 正好是 624，验证了我们的思路</p><p>现在的数据都是十六进制的形式，我们先将他们变回字节的形式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ciphers = [<span class="built_in">bytes</span>.fromhex(line) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;msg.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).readlines()]</span><br></pre></td></tr></table></figure><p>old_key 和 old_iv 题目直接给出了，于是我们可以直接解密得到明文。解密函数只要对着加密函数照葫芦画瓢就可以了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, key, iv</span>):</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    plain_text = cryptos.decrypt(c)</span><br><span class="line">    <span class="keyword">return</span> plain_text</span><br></pre></td></tr></table></figure><p>解密后去掉补位发现数据又变回了十六进制的形式，长度为 24，取前 16 位为 r1，剩余部分即为 r2</p><p>接下来需要<strong>按顺序</strong>上传，理论上应该先上传 64 位数，再上传 32 位数，但由于 Randcrack 只支持上传 32 位数，需要先将 64 位数分解。64 位随机数的生成本质上是两个 32 位随机数拼接而来，<strong>低位先生成，高位后生成</strong>。之前我在这里先传高位导致预测错误卡了好久，警钟敲烂。</p><p>取位数涉及到位运算的技巧。取低 32 位就用<code>r1 &amp; 0xffffffff</code>，取高 32 位就用<code>r1 &gt;&gt; 32</code></p><p>至此，所有的难关都已攻破，预测完参数后解出 flag 即可，由于 salt 与 m 是直接用字符串拼接的，所以不处理也可以</p><h2 id="完整代码">完整代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, key, iv</span>):</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    cryptos = AES.new(key, mode, iv)</span><br><span class="line">    plain_text = cryptos.decrypt(c)</span><br><span class="line">    <span class="keyword">return</span> plain_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">old_key = <span class="string">b&quot;73E5602B54FE63A5&quot;</span></span><br><span class="line">old_iv = <span class="string">b&quot;B435AE462FBAA662&quot;</span></span><br><span class="line"></span><br><span class="line">ciphers = [<span class="built_in">bytes</span>.fromhex(line) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;msg.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ciphers:</span><br><span class="line">    plain = decrypt(c, old_key, old_iv).rstrip(<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    r1 = <span class="built_in">int</span>(plain[:<span class="number">16</span>], <span class="number">16</span>)</span><br><span class="line">    r2 = <span class="built_in">int</span>(plain[<span class="number">16</span>:], <span class="number">16</span>)</span><br><span class="line">    rc.submit(r1 &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">    rc.submit(r1 &gt;&gt; <span class="number">32</span>)</span><br><span class="line">    rc.submit(r2)</span><br><span class="line"></span><br><span class="line">salt = <span class="string">f&quot;<span class="subst">&#123;rc.predict_getrandbits(<span class="number">32</span>):X&#125;</span>&quot;</span>.encode()</span><br><span class="line">key = <span class="string">f&quot;<span class="subst">&#123;rc.predict_getrandbits(<span class="number">64</span>):X&#125;</span>&quot;</span>.encode()</span><br><span class="line">iv = <span class="string">f&quot;<span class="subst">&#123;rc.predict_getrandbits(<span class="number">64</span>):X&#125;</span>&quot;</span>.encode()</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;9847f103ed4dce08c5ab8cb22288a477df4ae2a96bf10ccecc94ba799e4e072372c401aed54925e2eeff47fe5c56be2c&quot;</span>)</span><br><span class="line">flag = decrypt(c, key, iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;Stinger&#123;2301-3092-3291-2994-3911&#125;FF8D434C\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>没用的知识增加力</p>]]></content:encoded>
      
      
      <category domain="https://blog.xenlyra.cc/categories/%E5%AD%A6%E4%B9%A0/">学习</category>
      
      
      <category domain="https://blog.xenlyra.cc/tags/Crypto/">Crypto</category>
      
      
      <comments>https://blog.xenlyra.cc/randcrack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://blog.xenlyra.cc/hello-world/</link>
      <guid>https://blog.xenlyra.cc/hello-world/</guid>
      <pubDate>Mon, 24 Feb 2025 11:34:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.xenlyra.cc/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
